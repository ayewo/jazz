{
  "name": "Node.js",
  "version": "1.0.0",
  "description": "",
  "main": "dist/index.js",
  "scripts": {
    "build:ws": "cp public/client/http/index.html public/client/ws/index.html && gsed -i 's/const useWebSocket = false;/const useWebSocket = true;/g' public/client/ws/index.html",
    "build:caddy": "cp src/caddy/Caddyfile dist/caddy/Caddyfile",
    "build:html-js": "pnpm build:ws && vite build",
    "build": "rm -rf dist && pnpm run build:html-js && tsc",
    "format:html-js": "prettier --write '**/*.{html,js}'",
    "format:ts": "prettier --write './src/**/*.ts'",
    "format": "pnpm run format:html-js && pnpm run format:ts",
    "node-ws": "pnpm run build && NODE_ENV=production node --max-old-space-size=8192 dist/node-js/websocket.js",
    "node-http1": "pnpm run build && NODE_ENV=production node --max-old-space-size=8192 dist/node-js/http1-sse.js",
    "node-http2": "pnpm run build && NODE_ENV=production node --max-old-space-size=8192 dist/node-js/http2-sse.js",
    "uws-ws": "pnpm run build && NODE_ENV=production node --max-old-space-size=8192 dist/uws-js/websocket.js",
    "uws-http1": "pnpm run build && NODE_ENV=production node --max-old-space-size=8192 dist/uws-js/http1-sse.js",
    "caddy-http1": "PORT=3001 NODE_ENV=production node --max-old-space-size=8192 dist/caddy/http1-sse.js",
    "caddy-http3": "pnpm run build && pnpm run build:caddy && CERT_PATH=./cert/localhost+1.pem KEY_PATH=./cert/localhost+1-key.pem NODE_ENV=production caddy start --config ./dist/caddy/Caddyfile && npm run caddy-http1",
    "dev:node-ws": "npx ts-node-dev --respawn src/node-js/websocket.ts",
    "dev:node-http1": "npx ts-node-dev --respawn src/node-js/http1-sse.ts",
    "dev:node-http2": "npx ts-node-dev --respawn src/node-js/http2-sse.ts",
    "dev:uws-ws": "npx ts-node-dev --respawn src/uws-js/websocket.ts",
    "dev:uws-http1": "npx ts-node-dev --respawn src/uws-js/http1-sse.ts",
    "dev:caddy-http1": "PORT=3001 npx ts-node-dev --respawn src/caddy/http1-sse.ts",
    "dev:caddy-http3": "CERT_PATH=./cert/localhost+1.pem KEY_PATH=./cert/localhost+1-key.pem caddy start --config ./src/caddy/Caddyfile && pnpm run dev:caddy-http1",
    "test": "playwright test",
    "test-text": "playwright test tests/covalue-text.spec.ts",
    "test-binary": "playwright test tests/covalue-binary.spec.ts",
    "test-halt-old": "playwright test tests/server-shutdown.spec.ts",
    "test-halt": "curl -k -X POST https://localhost:3000/stop",
    "clean": "rm -vrf benchmarks && mkdir -v benchmarks",
    "bench": "npx ts-node benchmark-runner.ts",
    "playwright": "clear; pnpm test-text; pnpm test-binary; pnpm test-halt; say 'Done'",
    "load-test-01": "LOG_LEVEL=info npx artillery run tests/artillery-text.ts   --scenario-name '1a Load Multiple'   -e multiple  --output $OUTPUT_FILENAME.01",
    "load-test-02": "LOG_LEVEL=info npx artillery run tests/artillery-text.ts   --scenario-name '1b Load Single'     -e single    --output $OUTPUT_FILENAME.02",
    "load-test-03": "LOG_LEVEL=info npx artillery run tests/artillery-text.ts   --scenario-name '2c Create Multiple' -e multiple  --output $OUTPUT_FILENAME.03",
    "load-test-04": "LOG_LEVEL=info npx artillery run tests/artillery-text.ts   --scenario-name '2d Create Single'   -e single    --output $OUTPUT_FILENAME.04",
    "load-test-05": "LOG_LEVEL=info npx artillery run tests/artillery-text.ts   --scenario-name '3e Mutate Single'   -e multiple  --output $OUTPUT_FILENAME.05",
    "load-test-06": "LOG_LEVEL=info npx artillery run tests/artillery-binary.ts --scenario-name '1a Load Multiple'   -e multiple  --output $OUTPUT_FILENAME.06",
    "load-test-07": "LOG_LEVEL=info npx artillery run tests/artillery-binary.ts --scenario-name '1b Load Single'     -e single    --output $OUTPUT_FILENAME.07",
    "load-test-08": "LOG_LEVEL=info npx artillery run tests/artillery-binary.ts --scenario-name '2c Create Multiple' -e multiple  --output $OUTPUT_FILENAME.08",
    "load-test-09": "LOG_LEVEL=info npx artillery run tests/artillery-binary.ts --scenario-name '2d Create Single'   -e single    --output $OUTPUT_FILENAME.09",
    "load-test-10": "LOG_LEVEL=info npx artillery run tests/artillery-binary.ts --scenario-name '3e Mutate Single'   -e multiple  --output $OUTPUT_FILENAME.10",
    "load-tests": "clear; pnpm load-test-01; pnpm load-test-02; pnpm load-test-03; pnpm load-test-04; pnpm load-test-05; pnpm load-test-06; pnpm load-test-07; pnpm load-test-08; pnpm load-test-09; pnpm load-test-10; pnpm test-halt; say 'Done'",
    "load-tests-demo": "clear; pnpm load-test-00; pnpm load-test-06; pnpm test-halt; say 'Done'",
    "k6": "clear; k6 run tests/k6-text.js; pnpm test-halt; say 'Done'"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@faker-js/faker": "^8.4.1",
    "@fastify/cors": "^10.0.2",
    "@fastify/multipart": "^9.0.3",
    "@fastify/static": "^8.1.0",
    "@types/artillery": "^1.7.4",
    "artillery": "^2.0.22",
    "artillery-plugin-memory-inspector": "^1.1.1",
    "body-parser": "^1.20.2",
    "express": "^4.19.2",
    "fastify": "^5.2.1",
    "finalhandler": "^1.2.0",
    "serve-static": "^1.15.0",
    "spdy": "^4.0.2",
    "uWebSockets.js": "github:uNetworking/uWebSockets.js#v20.51.0",
    "uuid": "^10.0.0",
    "winston": "^3.14.2",
    "ws": "^8.18.0"
  },
  "devDependencies": {
    "@playwright/test": "^1.49.0",
    "@types/body-parser": "^1.19.5",
    "@types/express": "^4.17.21",
    "@types/finalhandler": "^1.2.3",
    "@types/k6": "^0.54.2",
    "@types/mime-types": "^2.1.4",
    "@types/node": "^22.5.0",
    "@types/serve-static": "^1.15.7",
    "@types/spdy": "^3.4.9",
    "@types/uuid": "^10.0.0",
    "@types/uws": "^0.13.6",
    "@types/ws": "^8.5.12",
    "mime-types": "^2.1.35",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.5.4",
    "vite": "^5.4.9",
    "vite-plugin-static-copy": "^2.0.0"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  },
  "prettier": {
    "trailingComma": "all",
    "tabWidth": 4,
    "semi": true,
    "singleQuote": false
  }
}
